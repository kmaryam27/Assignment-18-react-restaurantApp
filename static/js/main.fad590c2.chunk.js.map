{"version":3,"sources":["logo_restaurant.svg","resipe.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","src","logo_restaurant","alt","SearchForm","type","name","id","placeholder","value","searchVal","onChange","handleChange","onClick","selectRecipes","DirectoryView","App_SearchForm","selectedRecipes","map","e","i","App_RecipeCard","showDetails","key","RecipeCard","DetailView","recipe_restaurant","selectedForDetails","ingredients","instructions","Details","Object","keys","length","App_DetailView","App","state","list","img","event","_this","setState","target","preventDefault","selection","filter","includes","innerHTML","App_Header","App_DirectoryView","this","App_Details","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fad590c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_restaurant.cadc5254.svg\";","module.exports = __webpack_public_path__ + \"static/media/resipe.69c75237.png\";","import React, { Component } from 'react';\nimport logo_restaurant from './logo_restaurant.svg'\nimport recipe_restaurant from './resipe.png'\nimport './App.css';\n\nconst Header = props => (\n  <div className=\"header_div\">\n    <img src={logo_restaurant} alt=\"logo\" className=\"logo_img\"/> \n    <h2 className=\"headertxt\">Recipe App</h2>\n  </div>\n)\n\nconst SearchForm = props => (\n  <form className=\"searchForm_div\">\n    <div>\n      <div className='input-field'>\n        <input className=\"validate\" type='text' name='search' id='search' placeholder=\"search...\" value={props.searchVal} onChange={props.handleChange}/>\n      </div>\n    </div>\n    <button className=\"btn\" onClick={props.selectRecipes}>search</button>\n  </form>\n)\n\nconst DirectoryView = props => (\n  <div className=\"directoryView_div\">\n    <SearchForm handleChange={props.handleChange} searchVal={props.searchVal} selectRecipes={props.selectRecipes}/>\n    {props.selectedRecipes.map((e, i) => (<RecipeCard showDetails={props.showDetails} selectedRecipes={e.name} key={i}/>))}\n  </div>\n)\n\nconst RecipeCard = props => (\n  <div className=\"recipeCard_div\"> \n    <h2 onClick={props.showDetails}>{props.selectedRecipes}</h2>\n  </div>\n)\n\n\nconst DetailView = props => (\n  <div className=\"detailView_div\">\n    <div>\n      <img src={recipe_restaurant} alt=\"recipe\" className=\"recipe_img\"/> \n      <div><h3>{props.selectedForDetails.name}</h3></div>\n    </div>\n    <div>\n      <div>\n        <h4>Ingredients</h4>\n        <div>{props.selectedForDetails.ingredients}</div>\n      </div>\n      <div>\n        <h4>Instructions</h4>\n        <div>{props.selectedForDetails.instructions}</div>\n      </div>\n    </div>\n  </div>\n\n)\n\nconst Details = props => {\n  if (Object.keys(props.selectedForDetails).length !== 0) {\n    return <DetailView selectedForDetails={props.selectedForDetails}/>;\n  }\n  return <div></div>;\n}\n\n\nclass App extends Component {\n  state = {\n    selectedRecipes: [],\n    searchVal: '',\n    selectedForDetails: {},\n    list: [{\n      id: 1,\n      name: 'turkey + stuff',\n      ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n      instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery'],\n      img: './img/turkey_1.jpg'\n    },\n    {\n      id: 2,\n      name: 'turkey Sandwich',\n      ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n      instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery'],\n      img: './img/turkey_1.jpg'\n    },\n    {\n      id: 3,\n      name: 'Mozarella turkey pizza',\n      ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n      instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery'],\n      img: './img/turkey_1.jpg'\n    }\n  ]  \n  }\n\n  handleChange = (event) => {\n    this.setState({searchVal: event.target.value});\n  }\n\n  selectRecipes = (event) => {\n    event.preventDefault();\n    const selection = this.state.list.filter(e => e.name.includes(this.state.searchVal));\n    this.setState({selectedRecipes: selection , searchVal: ''});\n  }\n\n  showDetails = (event) => {\n    event.preventDefault();\n    const selection = this.state.list.filter(e => e.name.includes(event.target.innerHTML));\n    this.setState({selectedForDetails: selection[0]});\n  }\n\n\n  render() {\n    return (\n      <div className=\" App\">\n        <Header/>\n        <DirectoryView handleChange={this.handleChange} searchVal={this.state.searchVal} selectRecipes={this.selectRecipes} selectedRecipes={this.state.selectedRecipes} showDetails={this.showDetails}/>\n        <Details selectedForDetails={this.state.selectedForDetails} />\n\n        {/* <DetailView className=\"col s6\" selectedForDetails={this.state.selectedForDetails}/> */}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}